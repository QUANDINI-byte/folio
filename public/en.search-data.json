{"/games/":{"data":{"":" Diluvian Ultra - Unreal Engine 4 Principal Engineer Build management FMOD Steamworks Editor Tools Designed game Framework, Plugins and Tools for Designers and Artists Managed builds for internal, QA, and release Optimised project pre-release Supported post-release builds Designed and implemented a custom State Machine for enemy AI Extended features of the Paper2D plugin provided with Unreal Engine 4 UI programming Hels Rebellion - Unreal Engine 5 [canceled] Principal Engineer Build management Steamworks Dev-Ops Editor Tools Designed game Framework, Plugins and Tools for Designers and Artists Managed builds for internal, QA, and release Optimised existing systems (core and gameplay) Rapid itteration of system changes Implemented a spatial hash for tracking units and their squads and factions UI programming Designed and implemented a Utility AI for CPU enemy character "},"title":"_index"},"/projects/":{"data":{"":"","#":"Projects DinoHobby game engine written in Odin Dumb RobotSmall prototype where you manage vacuum robots ","dino#Dino":"Odin Language\nSome crash debugging tools Dino is a hobby game engine / framework that i decided to start after trying Odin.\nI had seen Odin around and after trying Beef and Zig, none of which had me feeling like it had so much more to offer than other options i.m.o. . Around the same time i decided that i wanted to gain a deeper understanding of the graphics pipeline instead of using existing tools, and being a hands on learner i dived right in with DirectX11.\nThis is not my first time making a small engine as i have previously written super small engines using C++ before. However Dino is primarally a project to learn as much as i can with a low level understanding.\nDino currently uses:\nSDL2 - window \u0026 event / input handling. Imgui - debug tooling. DirectX11 - graphics. GLM - vector math. ","dumb-robot#Dumb Robot":"Unreal Engine 5 - one week\nDumb Robot is a cleaning-like simulator but with less manual work and more “personality”. It gave me the opertunity to learn editor debug visualization and runtime render targets in Unreal Engine 5 in much more detail.\nThe vacuum Any texture can be used to generate Mess Actor Data (MAD) and a transparentcy threshold is used to aid in control for what contributes to MAD. MAD is built in editor and is cached to an asset for each level. The obvious downside to this is having to load all MAD data, however it is rather tiny in size and is only required at the beginning of a level.\nEach Mess Actor texture has its own voxel resolution and is automatically sagests smaller sizes or larger ones when a new texture is selected or a designer asks for it, to keep consistancy and performance impact at a minimum. nice and easy to see what has been cleaned Each Mess Actor also has a “Percent cleaned for complete” property. This helps when there is practically no mess left, but also gives an easy way to configure Mess Actors that might be only partially visible."},"title":"_index"}}